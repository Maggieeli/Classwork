from typing import List
import datetime

class Bin:
    def __init__(self, id: int, location: str, part_id: str, qty_in_bin: int):
        self._id = id
        self._location = location
        self._part_id = part_id
        self._qty_in_bin = qty_in_bin

    def get_part_id(self) -> str:
        return self._part_id

    def set_part_id(self, new_part_id: str) -> None:
        if len(new_part_id) > 20:
            raise Exception("Part id can not exceed 50 characters")
        
        self._part_id = part_id

class Part:
    def __init__(self, id: int, name: str, quantity: int, bin_id: int):
        self._id = id
        self._name = name
        self._quantity = quantity
        self._bin_id = bin_id
    
    def get_bin_id(self) -> int:
        return self._bin_id

    def set_bin_id(self, new_bin_id: int) -> None:
        assert type(new_bin_id) is int, "The bin id must be an Integer."

# motor = Part(1, "motor", 2, 3)
# motor.set_bin_id("2")
# print(motor.get_bin_id())

class User:
    def __init__(self, email: str, student_num: int):
        self._email = email
        self._student_num = student_num

class Log:
    def __init__(self, time: datetime, user_id: int, part_id: int, quantity: int):
        self._time = time
        self._user_id = user_id
        self._part_id = part_id
        self._quantity = quantity

class InventoryManager:
    def __init__(self, parts: List[Part], bins: List[Bin], logs: List[Log], users: List[User]):
        self._part = parts
        self._bins = bins
        self._logs = logs
        self._users = users

