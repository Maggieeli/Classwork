import datetime
from typing import List

class BaseRecord:
    def __init__(self, id: int):
        self._id = id
        self.created_at = datetime.datetime.now()
        self.updated_at = datetime.datetime.now()
    
    def get_id(self) -> int:
        return self._id
    
    def set_id(self, new_id):
        if type(new_id) != int or new_id < 0:
            raise ValueError("Id should be a positive integer")
        self._id = new_id
        self.updated_at = datetime.datetime.now()
    
class Bin(BaseRecord):
    def __init__(self, id: int, location: str, part_id: str, qty_in_bin: int):
        super().__init__(id)
        self._location = location
        self._part_id = part_id
        self._qty_in_bin = qty_in_bin

    def get_location(self) -> str:
        return self._location
    def get_part_id(self) -> str:
        return self._part_id
    def get_qty_in_bin(self) -> int:
        return self._qty_in_bin
    
    def set_qty_in_bin(self, new_qty):
        self._qty_in_bin = new_qty
        self.updated_at = datetime.datetime.now()
        assert type(new_qty) is int and new_qty >= 0, "The value must a positive integer"
    def set_part_id(self, new_part_id):
        self._part_id = new_part_id
        self.updated_at = datetime.datetime.now()
        assert type(new_part_id) is str, "The part id must be a str"
    def set_location(self, new_location):
        self._location = new_location
        self.updated_at = datetime.datetime.now()
        assert type(new_location) is str, "The location must be a str"
    
class Part(BaseRecord):
    def __init__(self, id: int, name: str, quantity: int, bin_id: int):
        super().__init__(id)
        self._name = name
        self._quantity = quantity
        self._bin_id = bin_id
    
    def get_name(self) -> str:
        return self._name
    def get_quantity(self) -> int:
        return self._quantity
    def get_bin_id(self) -> int:
        return self._bin_id

    def set_name(self, new_name):
        self._name = new_name
        self.updated_at = datetime.datetime.now()
        assert len(new_name) <= 30, "Names should be 30 chars or less."
    def set_quantity(self, new_quantity) -> None:
        self._quantity = new_quantity
        self.updated_at = datetime.datetime.now()
        assert type(new_quantity) is int and new_quantity >= 0, "The value must a positive integer"
    def set_bin_id(self, new_bin_id) -> None:
        self._bin_id = new_bin_id
        self.updated_at = datetime.datetime.now()
        assert type(new_bin_id) is int, "The bin id must be an integer"
    

class User(BaseRecord):
    def __init__(self, email: str, student_num: int):
        super().__init__(student_num)
        self._email = email
    
    def get_email(self) -> str:
        return self._email

    def set_email(self, new_email) -> None:
        self._email = new_email
        self.updated_at = datetime.datetime.now()
        assert type(new_email) is str, "Email must be a str"
   
    
    
class Log(BaseRecord):
    def __init__(self, user_id: int, part_id: int, quantity: int, log_id: int):
        super().__init__(log_id)
        self._user_id = user_id
        self._part_id = part_id
        self._quantity = quantity
    
    def get_user_id(self) -> str:
        return self._user_id
    def get_quantity(self) -> int:
        return self._quantity
    def get_part_id(self) -> int:
        return self._part_id
    

    def set_user_id(self, new_user_id):
        self._user_id = new_user_id
        self.updated_at = datetime.datetime.now()
        assert len(new_user_id) <= 20, "User id must be 20 chars or less "
    def set_quantity(self, new_quantity):
        self._quantity = new_quantity
        self.updated_at = datetime.datetime.now()
        assert type(new_quantity) is int and new_quantity >= 0, "The value must a positive integer"
    def set_part_id(self, new_part_id):
        self._part_id = new_part_id
        self.updated_at = datetime.datetime.now()
        assert type(new_part_id) is int, "The part id must be an integer"

class Inventory_manager:
    def __init__(self, bins: List[Bin]):
        self._parts = []
        self._bins = bins
        self._logs = []
        self._users = []

    def get_parts(self) -> List[Part]:
        return self._parts
    def get_bins(self) -> List[Bin]:
        return self._bins
    def get_logs(self) -> List[Log]:
        return self._logs
    def get_users(self) -> List[User]:
        return self._users
    
    def set_parts(self, new_parts):
        for part in new_parts:
            assert type(part) is Part, "parts must have a List of type Part"
        self._parts = new_parts
    def set_bins(self, new_bins):
        for bin in new_bins:
            assert type(bin) is Bin, "bins must have a list of type Bin"
    def set_logs(self, new_logs):
        for log in new_logs:
            assert type(log) is Log, "logs must have a list of type Log"
        self._logs = new_logs
    def set_users(self, new_users):
        for user in new_users:
            assert type(user) is User, "users must have a list of type User"
        self._user = new_users
    
    def create_user(self, email: str, student_num: int) -> User:
        """Creates a user object and adds them to a list of users.

        Args:   
            email: Student's email
            student_num: Student number
        
        Returns:
            The created student object
        """
        new_user = User(email, student_num)
        prev_users = self.get_users()
        all_users = prev_users.append(new_user)
        self.set_users(all_users)
        return new_user
    
    def find_bin(self, location: str) -> Bin:
        """Searches through a list of bins, finds the one with the correct location.

        Args:
            location: The location of a bin
        
        Returns:
            The bin corresponding to specific location.
        """
        all_bins = self.get_bins()
        for bin in all_bins:
            if bin.location == location:
                return bin
        else:
            raise Exception("No bin found at that location")
    
    def find_user(self, num: int) -> User:
        """Searches the list of students and finds the one matching the given number.

        Args:
            num: The student number to look for
        
        Returns:
            The student with the corresponding student number.
        """
        all_users = self.get_users()
        for user in all_users:
            if user.stuent_num == num:
                return user 
        else:
            raise Exception("No student with given student number was found")
    
    def add_part(self, name: str, quantity: int, bin_location: str):
        """Creates a Part object and takes the bin id. Adds set part to parts list.

        Args:
            name: Name of part
            quantity: # of parts avaliable
            bin_location: The location of the bin
        """
        new_part_bin = self.find_bin(bin_location)
        new_part = Part(new_part_bin.get_part_id(), name, quantity, new_part_bin.get_id())
        prev_parts = self.get_parts()
        all_parts = prev_parts.append(new_part)
        self.set_parts(all_parts)
